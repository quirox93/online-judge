---
import { ViewTransitions } from "astro:transitions";
import "@/styles/globals.css";
import LoginStatus from "@/components/LoginStatus.astro";
import { getUser } from "../auth";
const user = await getUser(Astro.request);
interface Props {
  title: string;
  slug: string;
}
const { title, slug } = Astro.props as Props;
const isLoggedIn = !(user == null);
---

<!doctype html>
<html class="dark max-w-3xl m-auto" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body>
    <nav
      class="relative select-none bg-secondary flex items-stretch w-full mb-10 border-2 border-slate-600 border-t-0"
    >
      <div class="flex flex-no-shrink items-stretch h-12">
        <a
          href="/"
          class:list={[
            "flex-no-grow flex-no-shrink relative py-2 px-4 leading-normal text-foreground no-underline flex items-center hover:bg-background",
            { "bg-background": slug === "home" },
          ]}>Home</a
        >
        <a
          href="/about"
          class:list={[
            "flex-no-grow flex-no-shrink relative py-2 px-4 leading-normal text-foreground no-underline flex items-center hover:bg-background",
            { "bg-background": slug === "about" },
          ]}>About</a
        >
      </div>

      <div class="flex items-stretch flex-no-shrink flex-grow">
        <div class="flex items-stretch justify-end ml-auto">
          <LoginStatus isLoggedIn={isLoggedIn} />
        </div>
      </div>
    </nav>
    <slot />
    <style is:global></style>
    <script is:inline>
      async function parseMagicLink() {
        const vals = window.location.hash
          .substring(1)
          .split("&")
          .map((kv) => kv.split("="));
        const hashParameters = new Map(vals);
        console.log(hashParameters);
        if (!hashParameters.get("access_token")) return;
        const data = await fetch("/api/login", {
          method: "POST",
          headers: new Headers({ "Content-Type": "application/json" }),
          credentials: "same-origin",
          body: JSON.stringify({
            access_token: hashParameters.get("access_token"),
            expires_in: hashParameters.get("expires_in"),
            refresh_token: hashParameters.get("refresh_token"),
          }),
        });

        if (data.ok) {
          window.location.replace("/");
        }
      }
      parseMagicLink();
    </script>
  </body>
</html>
